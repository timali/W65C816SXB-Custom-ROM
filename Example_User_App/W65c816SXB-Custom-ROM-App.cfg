SYMBOLS
{
    # The starting address of the hardware IO area.
    __HW_IO_ADDR__:     type=export,    value=$7F00;
    __HW_IO_SIZE__:     type=export,    value=$0100;

    # Hardware IO regions.
    __XCS0_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $00;
    __XCS1_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $20;
    __XCS2_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $40;
    __XCS3_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $60;
    __ACIA_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $80;
    __PIA_AADR__:       type=export,    value=__HW_IO_ADDR__ + $A0;
    __VIA_USR_ADDR__:   type=export,    value=__HW_IO_ADDR__ + $C0;
    __VIA_USB_ADDR__:   type=export,    value=__HW_IO_ADDR__ + $E0;

    # The address of the hardware breakpoint. Not used on a standard board.
    __HW_BRK_ADDR__:    type=weak,      value=$FFFFFF;
}

MEMORY
{
    # The RAM on the board, minus the ZP, stack, and what the ROM monitor uses.
    ZP:         start=$0000,    size=$0100, type=rw, file="";

    # The stack used in '02 emulation mode (and also possibly in 816 mode).
    STACK:      start=$0100,    size=$0100, type=rw, file="";

    # The RAM on the board, minus the ZP, stack, and what the ROM monitor uses.
    RAM:        start=$0200,    size=$7CC0, type=rw, file="";

    # The user's application ROM area.
    USR_ROM:    start=$8000,    size=$7000, type=ro, file="%O";
}

SEGMENTS
{
    # Define the zero-page segment. We're free to use it all.
    ZEROPAGE:       load=ZP,       type=zp;

    # The user application's data segment, excluding ZP and stack.
    DATA:           load=RAM,       type=rw;

    # The user application's code area, at the beginning of flash ROM.
    CODE:           load=USR_ROM,   type=ro,    offset=$0000;
}