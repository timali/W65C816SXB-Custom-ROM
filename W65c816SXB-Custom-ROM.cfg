SYMBOLS
{
    # The starting address of the hardware IO area.
    __HW_IO_ADDR__:     type=export,    value=$7F00;
    __HW_IO_SIZE__:     type=export,    value=$0100;

    # Hardware IO regions.
    __XCS0_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $00;
    __XCS1_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $20;
    __XCS2_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $40;
    __XCS3_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $60;
    __ACIA_ADDR__:      type=export,    value=__HW_IO_ADDR__ + $80;
    __PIA_AADR__:       type=export,    value=__HW_IO_ADDR__ + $A0;
    __VIA_USR_ADDR__:   type=export,    value=__HW_IO_ADDR__ + $C0;
    __VIA_USB_ADDR__:   type=export,    value=__HW_IO_ADDR__ + $E0;

    # The address of the hardware breakpoint. Not used on a standard board.
    __HW_BRK_ADDR__:    type=weak,      value=$FFFFFF;
}

MEMORY
{
    # The usable RAM on the board.
    RAM:        start=$0000,    size=$7F00, type=rw;

    # The user's application ROM area.
    USR_ROM:    start=$8000,    size=$7000, type=ro, file="", define=yes;

    # The customized ROM monitor only consumes the last 4 KB of the flash ROM, which
    # is the sector size of the flash part (the minimum size of an erase operation).
    # This way, we can erase the ROM while leaving the rest of the flash intact.
    MON_ROM:    start=$F000,    size=$1000, type=ro, file=%O, fill=yes, fillval=$FF;
}

# Configure the segments to work both for the monitor and for the user's application.
SEGMENTS
{
    # Define the zero-page segment. We're free to use it all.
    ZEROPAGE:       load=RAM,       type=zp,    start=$0000;

    # Memory used by the monitor which is unavailable to the application.
    WORK_RAM:       load=RAM,       type=bss,   start=$7EC0,    define=yes;

    # Raw vectors are not typically set by the user. Place these immediately after
    # the work RAM. Use an even alignment just for asthetics. There's no real
    # aligmenent requirements, nor advantage to even alignment. Just looks better.
    RAW_VECTORS:    load=RAM,       type=bss,   align=$0002;

    # Shadow vectors that the user may set. These go immediately after the raw
    # vectors. Again, use even alignment for no real reason other than looks.
    SHADOW_VECTORS: load=RAM,       type=bss,   align=$0002,    define=yes;

    # The monitor image starts off with a header which contains a signature
    # and a version, and it is $80 bytes in length.
    MONITOR_HEADER: load=MON_ROM,   type=ro,    offset=$0000,   define=yes;

    # After the signature comes a pointer table, which is at a fixed offset
    # from the image start, and is $80 bytes in length.
    POINTER_TABLE:  load=MON_ROM,   type=ro,    offset=$0080;

    # After the pointer table comes the actual monitor code itself.
    MON_CODE:       load=MON_ROM,   type=ro,    offset=$0100;

    # CPU vectors are always located at this area in flash.
    CPU_VECTORS:    load=MON_ROM,   type=ro,    start=$FFE4,    define=yes;
}